3
1. Межпроцессное взаимодействие (IPC - Interprocess Communication) - это механизм, позволяющий процессам обмениваться данными и передавать сигналы друг другу. IPC необходимо, когда приложения состоят из нескольких процессов, выполняющихся параллельно.

2. Группы IPC-механизмов:
   - Наследуемые механизмы (Inheritable IPC): каналы, сокеты, именованные каналы.
   - Основанные на записях (Record-Based IPC): очереди сообщений, каталоги сообщений.
   - Разделяемые механизмы (Shared Memory IPC): разделяемая память, mapped files.

3. Для максимальной скорости передачи данных лучше выбрать разделяемую память или mapped files, так как они обеспечивают прямой доступ к памяти без копирования данных.

4. Для повышенной устойчивости к ошибкам лучше выбрать очереди сообщений или сокеты, поскольку они обеспечивают надежную передачу данных и позволяют восстанавливаться после сбоев.

5. Синхронизация - это механизм, обеспечивающий согласованный доступ нескольких потоков к общим ресурсам (данным, устройствам и т.д.). Синхронизация необходима для предотвращения состояний гонки и связанных с ними ошибок.

6. Механизмы синхронизации:
   - Мьютексы (Mutexes) - обеспечивают взаимное исключение, разрешая только одному потоку находиться в критической секции кода.
   - Семафоры (Semaphores) - счетчик с операциями wait и release, управляющий доступом к ресурсу с ограниченным количеством экземпляров.
   - События (Events) - механизм для синхронизации потоков, позволяющий одним потокам сигнализировать другим о наступлении некоторого события.

7. Главное отличие CriticalSection в Windows от других механизмов синхронизации - она является оптимизированной реализацией легковесного мьютекса для синхронизации внутри одного процесса. Основной плюс - высокая производительность за счет меньшего количества вызовов ядра. Минус - работает только локально внутри процесса и не может использоваться для синхронизации между процессами.